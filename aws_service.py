from ezmatrix import *
from animation import *
from modules import *

from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient

import time
import json
import threading

endpoint = 'avhmfui1t673z.iot.us-west-2.amazonaws.com'
root_ca_path = '/home/pi/Desktop/aws/root-CA.crt'
certificate_path = '/home/pi/Desktop/aws/RaspPi.cert.pem'
private_key_path = '/home/pi/Desktop/aws/RaspPi.private.key'

topic = 'rpi/desktopbuddy'

matrix = EzMatrix()

class AnimationThread(threading.Thread):
    def __init__(self, anim=None):
        super(AnimationThread, self).__init__()
        self.should_stop = False
        self.anim = anim
        
    def run(self):
        while not self.should_stop:
            matrix.run_anim(self.anim)

class CallbackContainer(object):
    def __init__(self, client):
        self._client = client
        self.thread = AnimationThread()
        
    def interpritMessage(self, client, userdata, message):
        try:
            msg = json.loads(message.payload)['message']
        except ValueError:
            print('MISSING DELIMITER IN JSON')
        
        if 'arg' in message.payload:
            args = json.loads(message.payload)['arg']
        else:
            args = ''
        
        print('Message received: \"{}\" from topic {}'.format(msg, message.topic))
        
        if self.thread.isAlive():
            print('JOINING THREAD')
            self.thread.should_stop = True
            self.thread.join()

        if 'clock' in msg:
            '''display clock'''
            pass
        if 'image' in msg:
            ''' display image '''
            pass
        if 'gif' in msg:
            anim = Module.gif_anim(args)
            
            self.thread = AnimationThread(anim)
            self.thread.should_stop = False
            self.thread.start()

if __name__ == "__main__":
    print('STARTING...')
    client = AWSIoTMQTTClient('desktopBuddy')
    # the argument in above line is the clientID, if left empty it will be randomly generated by AWS
    client.configureEndpoint(endpoint, 8883)
    client.configureCredentials(root_ca_path, private_key_path, certificate_path)

    client.configureAutoReconnectBackoffTime(1, 32, 20)
    client.configureOfflinePublishQueueing(-1)
    client.configureDrainingFrequency(2)
    client.configureConnectDisconnectTimeout(10)
    client.configureMQTTOperationTimeout(5)

    myCallbackContainer = CallbackContainer(client)

    client.connect()

    client.subscribe(topic, 1, myCallbackContainer.interpritMessage)
    time.sleep(2)
    print('STARTED SERVICE')

    while True:
        time.sleep(3)